// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: format.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_format_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_format_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_format_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_format_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_format_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_format_2eproto_metadata_getter(int index);
class BasicBlock;
struct BasicBlockDefaultTypeInternal;
extern BasicBlockDefaultTypeInternal _BasicBlock_default_instance_;
class BasicBlockHeader;
struct BasicBlockHeaderDefaultTypeInternal;
extern BasicBlockHeaderDefaultTypeInternal _BasicBlockHeader_default_instance_;
class Insruction;
struct InsructionDefaultTypeInternal;
extern InsructionDefaultTypeInternal _Insruction_default_instance_;
class MemoryReference;
struct MemoryReferenceDefaultTypeInternal;
extern MemoryReferenceDefaultTypeInternal _MemoryReference_default_instance_;
class Record;
struct RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Register;
struct RegisterDefaultTypeInternal;
extern RegisterDefaultTypeInternal _Register_default_instance_;
class Trace;
struct TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
class TraceHeader;
struct TraceHeaderDefaultTypeInternal;
extern TraceHeaderDefaultTypeInternal _TraceHeader_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BasicBlock* Arena::CreateMaybeMessage<::BasicBlock>(Arena*);
template<> ::BasicBlockHeader* Arena::CreateMaybeMessage<::BasicBlockHeader>(Arena*);
template<> ::Insruction* Arena::CreateMaybeMessage<::Insruction>(Arena*);
template<> ::MemoryReference* Arena::CreateMaybeMessage<::MemoryReference>(Arena*);
template<> ::Record* Arena::CreateMaybeMessage<::Record>(Arena*);
template<> ::Register* Arena::CreateMaybeMessage<::Register>(Arena*);
template<> ::Trace* Arena::CreateMaybeMessage<::Trace>(Arena*);
template<> ::TraceHeader* Arena::CreateMaybeMessage<::TraceHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TraceHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TraceHeader) */ {
 public:
  inline TraceHeader() : TraceHeader(nullptr) {}
  virtual ~TraceHeader();
  explicit constexpr TraceHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceHeader(const TraceHeader& from);
  TraceHeader(TraceHeader&& from) noexcept
    : TraceHeader() {
    *this = ::std::move(from);
  }

  inline TraceHeader& operator=(const TraceHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceHeader& operator=(TraceHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceHeader* internal_default_instance() {
    return reinterpret_cast<const TraceHeader*>(
               &_TraceHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TraceHeader& a, TraceHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceHeader* New() const final {
    return CreateMaybeMessage<TraceHeader>(nullptr);
  }

  TraceHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceHeader& from);
  void MergeFrom(const TraceHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TraceHeader";
  }
  protected:
  explicit TraceHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryTraceFieldNumber = 1,
    kNumOfRegFieldNumber = 2,
  };
  // bool memory_trace = 1;
  void clear_memory_trace();
  bool memory_trace() const;
  void set_memory_trace(bool value);
  private:
  bool _internal_memory_trace() const;
  void _internal_set_memory_trace(bool value);
  public:

  // uint32 num_of_reg = 2;
  void clear_num_of_reg();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_of_reg() const;
  void set_num_of_reg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_of_reg() const;
  void _internal_set_num_of_reg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TraceHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool memory_trace_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_of_reg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class MemoryReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MemoryReference) */ {
 public:
  inline MemoryReference() : MemoryReference(nullptr) {}
  virtual ~MemoryReference();
  explicit constexpr MemoryReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryReference(const MemoryReference& from);
  MemoryReference(MemoryReference&& from) noexcept
    : MemoryReference() {
    *this = ::std::move(from);
  }

  inline MemoryReference& operator=(const MemoryReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryReference& operator=(MemoryReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MemoryReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryReference* internal_default_instance() {
    return reinterpret_cast<const MemoryReference*>(
               &_MemoryReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MemoryReference& a, MemoryReference& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryReference* New() const final {
    return CreateMaybeMessage<MemoryReference>(nullptr);
  }

  MemoryReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MemoryReference& from);
  void MergeFrom(const MemoryReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MemoryReference";
  }
  protected:
  explicit MemoryReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // uint64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 value = 4;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MemoryReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class Insruction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Insruction) */ {
 public:
  inline Insruction() : Insruction(nullptr) {}
  virtual ~Insruction();
  explicit constexpr Insruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Insruction(const Insruction& from);
  Insruction(Insruction&& from) noexcept
    : Insruction() {
    *this = ::std::move(from);
  }

  inline Insruction& operator=(const Insruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Insruction& operator=(Insruction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Insruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Insruction* internal_default_instance() {
    return reinterpret_cast<const Insruction*>(
               &_Insruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Insruction& a, Insruction& b) {
    a.Swap(&b);
  }
  inline void Swap(Insruction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Insruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Insruction* New() const final {
    return CreateMaybeMessage<Insruction>(nullptr);
  }

  Insruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Insruction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Insruction& from);
  void MergeFrom(const Insruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Insruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Insruction";
  }
  protected:
  explicit Insruction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefsFieldNumber = 4,
    kInstrAddressFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kOpcodeFieldNumber = 1,
  };
  // repeated .MemoryReference refs = 4;
  int refs_size() const;
  private:
  int _internal_refs_size() const;
  public:
  void clear_refs();
  ::MemoryReference* mutable_refs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryReference >*
      mutable_refs();
  private:
  const ::MemoryReference& _internal_refs(int index) const;
  ::MemoryReference* _internal_add_refs();
  public:
  const ::MemoryReference& refs(int index) const;
  ::MemoryReference* add_refs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryReference >&
      refs() const;

  // uint64 instr_address = 2;
  void clear_instr_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 instr_address() const;
  void set_instr_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_instr_address() const;
  void _internal_set_instr_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 offset = 3;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 opcode = 1;
  void clear_opcode();
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode() const;
  void set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opcode() const;
  void _internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Insruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryReference > refs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 instr_address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class Register PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Register) */ {
 public:
  inline Register() : Register(nullptr) {}
  virtual ~Register();
  explicit constexpr Register(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Register(const Register& from);
  Register(Register&& from) noexcept
    : Register() {
    *this = ::std::move(from);
  }

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline Register& operator=(Register&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Register& default_instance() {
    return *internal_default_instance();
  }
  static inline const Register* internal_default_instance() {
    return reinterpret_cast<const Register*>(
               &_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Register& a, Register& b) {
    a.Swap(&b);
  }
  inline void Swap(Register* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Register* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Register* New() const final {
    return CreateMaybeMessage<Register>(nullptr);
  }

  Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Register>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Register* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Register";
  }
  protected:
  explicit Register(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Register)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class Record PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Record) */ {
 public:
  inline Record() : Record(nullptr) {}
  virtual ~Record();
  explicit constexpr Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Record";
  }
  protected:
  explicit Record(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistersFieldNumber = 2,
    kInsructionFieldNumber = 1,
  };
  // repeated .Register registers = 2;
  int registers_size() const;
  private:
  int _internal_registers_size() const;
  public:
  void clear_registers();
  ::Register* mutable_registers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Register >*
      mutable_registers();
  private:
  const ::Register& _internal_registers(int index) const;
  ::Register* _internal_add_registers();
  public:
  const ::Register& registers(int index) const;
  ::Register* add_registers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Register >&
      registers() const;

  // .Insruction Insruction = 1;
  bool has_insruction() const;
  private:
  bool _internal_has_insruction() const;
  public:
  void clear_insruction();
  const ::Insruction& insruction() const;
  ::Insruction* release_insruction();
  ::Insruction* mutable_insruction();
  void set_allocated_insruction(::Insruction* insruction);
  private:
  const ::Insruction& _internal_insruction() const;
  ::Insruction* _internal_mutable_insruction();
  public:
  void unsafe_arena_set_allocated_insruction(
      ::Insruction* insruction);
  ::Insruction* unsafe_arena_release_insruction();

  // @@protoc_insertion_point(class_scope:Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Register > registers_;
  ::Insruction* insruction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class BasicBlockHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasicBlockHeader) */ {
 public:
  inline BasicBlockHeader() : BasicBlockHeader(nullptr) {}
  virtual ~BasicBlockHeader();
  explicit constexpr BasicBlockHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicBlockHeader(const BasicBlockHeader& from);
  BasicBlockHeader(BasicBlockHeader&& from) noexcept
    : BasicBlockHeader() {
    *this = ::std::move(from);
  }

  inline BasicBlockHeader& operator=(const BasicBlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicBlockHeader& operator=(BasicBlockHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicBlockHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicBlockHeader* internal_default_instance() {
    return reinterpret_cast<const BasicBlockHeader*>(
               &_BasicBlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BasicBlockHeader& a, BasicBlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicBlockHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicBlockHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicBlockHeader* New() const final {
    return CreateMaybeMessage<BasicBlockHeader>(nullptr);
  }

  BasicBlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicBlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicBlockHeader& from);
  void MergeFrom(const BasicBlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicBlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasicBlockHeader";
  }
  protected:
  explicit BasicBlockHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadIdFieldNumber = 1,
    kModuleIdFieldNumber = 2,
    kBeginAddressFieldNumber = 3,
  };
  // uint64 thread_id = 1;
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_thread_id() const;
  void _internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 module_id = 2;
  void clear_module_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 module_id() const;
  void set_module_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_module_id() const;
  void _internal_set_module_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 begin_address = 3;
  void clear_begin_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_address() const;
  void set_begin_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_begin_address() const;
  void _internal_set_begin_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BasicBlockHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 thread_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 module_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 begin_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class BasicBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BasicBlock) */ {
 public:
  inline BasicBlock() : BasicBlock(nullptr) {}
  virtual ~BasicBlock();
  explicit constexpr BasicBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BasicBlock(const BasicBlock& from);
  BasicBlock(BasicBlock&& from) noexcept
    : BasicBlock() {
    *this = ::std::move(from);
  }

  inline BasicBlock& operator=(const BasicBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicBlock& operator=(BasicBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const BasicBlock* internal_default_instance() {
    return reinterpret_cast<const BasicBlock*>(
               &_BasicBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BasicBlock& a, BasicBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BasicBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicBlock* New() const final {
    return CreateMaybeMessage<BasicBlock>(nullptr);
  }

  BasicBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicBlock& from);
  void MergeFrom(const BasicBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BasicBlock";
  }
  protected:
  explicit BasicBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 2,
    kBbhdrFieldNumber = 1,
  };
  // repeated .Record records = 2;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::Record* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Record >*
      mutable_records();
  private:
  const ::Record& _internal_records(int index) const;
  ::Record* _internal_add_records();
  public:
  const ::Record& records(int index) const;
  ::Record* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Record >&
      records() const;

  // .BasicBlockHeader bbhdr = 1;
  bool has_bbhdr() const;
  private:
  bool _internal_has_bbhdr() const;
  public:
  void clear_bbhdr();
  const ::BasicBlockHeader& bbhdr() const;
  ::BasicBlockHeader* release_bbhdr();
  ::BasicBlockHeader* mutable_bbhdr();
  void set_allocated_bbhdr(::BasicBlockHeader* bbhdr);
  private:
  const ::BasicBlockHeader& _internal_bbhdr() const;
  ::BasicBlockHeader* _internal_mutable_bbhdr();
  public:
  void unsafe_arena_set_allocated_bbhdr(
      ::BasicBlockHeader* bbhdr);
  ::BasicBlockHeader* unsafe_arena_release_bbhdr();

  // @@protoc_insertion_point(class_scope:BasicBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Record > records_;
  ::BasicBlockHeader* bbhdr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// -------------------------------------------------------------------

class Trace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trace) */ {
 public:
  inline Trace() : Trace(nullptr) {}
  virtual ~Trace();
  explicit constexpr Trace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trace(const Trace& from);
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trace& operator=(Trace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }
  inline void Swap(Trace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trace* New() const final {
    return CreateMaybeMessage<Trace>(nullptr);
  }

  Trace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trace";
  }
  protected:
  explicit Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_format_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .BasicBlock data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::BasicBlock* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicBlock >*
      mutable_data();
  private:
  const ::BasicBlock& _internal_data(int index) const;
  ::BasicBlock* _internal_add_data();
  public:
  const ::BasicBlock& data(int index) const;
  ::BasicBlock* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicBlock >&
      data() const;

  // .TraceHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::TraceHeader& header() const;
  ::TraceHeader* release_header();
  ::TraceHeader* mutable_header();
  void set_allocated_header(::TraceHeader* header);
  private:
  const ::TraceHeader& _internal_header() const;
  ::TraceHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::TraceHeader* header);
  ::TraceHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:Trace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicBlock > data_;
  ::TraceHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_format_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TraceHeader

// bool memory_trace = 1;
inline void TraceHeader::clear_memory_trace() {
  memory_trace_ = false;
}
inline bool TraceHeader::_internal_memory_trace() const {
  return memory_trace_;
}
inline bool TraceHeader::memory_trace() const {
  // @@protoc_insertion_point(field_get:TraceHeader.memory_trace)
  return _internal_memory_trace();
}
inline void TraceHeader::_internal_set_memory_trace(bool value) {
  
  memory_trace_ = value;
}
inline void TraceHeader::set_memory_trace(bool value) {
  _internal_set_memory_trace(value);
  // @@protoc_insertion_point(field_set:TraceHeader.memory_trace)
}

// uint32 num_of_reg = 2;
inline void TraceHeader::clear_num_of_reg() {
  num_of_reg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceHeader::_internal_num_of_reg() const {
  return num_of_reg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceHeader::num_of_reg() const {
  // @@protoc_insertion_point(field_get:TraceHeader.num_of_reg)
  return _internal_num_of_reg();
}
inline void TraceHeader::_internal_set_num_of_reg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_of_reg_ = value;
}
inline void TraceHeader::set_num_of_reg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_of_reg(value);
  // @@protoc_insertion_point(field_set:TraceHeader.num_of_reg)
}

// -------------------------------------------------------------------

// MemoryReference

// uint32 type = 1;
inline void MemoryReference::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReference::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReference::type() const {
  // @@protoc_insertion_point(field_get:MemoryReference.type)
  return _internal_type();
}
inline void MemoryReference::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void MemoryReference::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MemoryReference.type)
}

// uint64 address = 2;
inline void MemoryReference::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReference::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReference::address() const {
  // @@protoc_insertion_point(field_get:MemoryReference.address)
  return _internal_address();
}
inline void MemoryReference::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryReference::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:MemoryReference.address)
}

// uint32 size = 3;
inline void MemoryReference::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReference::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReference::size() const {
  // @@protoc_insertion_point(field_get:MemoryReference.size)
  return _internal_size();
}
inline void MemoryReference::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void MemoryReference::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:MemoryReference.size)
}

// uint32 value = 4;
inline void MemoryReference::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReference::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReference::value() const {
  // @@protoc_insertion_point(field_get:MemoryReference.value)
  return _internal_value();
}
inline void MemoryReference::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void MemoryReference::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:MemoryReference.value)
}

// -------------------------------------------------------------------

// Insruction

// uint32 opcode = 1;
inline void Insruction::clear_opcode() {
  opcode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Insruction::_internal_opcode() const {
  return opcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Insruction::opcode() const {
  // @@protoc_insertion_point(field_get:Insruction.opcode)
  return _internal_opcode();
}
inline void Insruction::_internal_set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  opcode_ = value;
}
inline void Insruction::set_opcode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opcode(value);
  // @@protoc_insertion_point(field_set:Insruction.opcode)
}

// uint64 instr_address = 2;
inline void Insruction::clear_instr_address() {
  instr_address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insruction::_internal_instr_address() const {
  return instr_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insruction::instr_address() const {
  // @@protoc_insertion_point(field_get:Insruction.instr_address)
  return _internal_instr_address();
}
inline void Insruction::_internal_set_instr_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  instr_address_ = value;
}
inline void Insruction::set_instr_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_instr_address(value);
  // @@protoc_insertion_point(field_set:Insruction.instr_address)
}

// uint64 offset = 3;
inline void Insruction::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insruction::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Insruction::offset() const {
  // @@protoc_insertion_point(field_get:Insruction.offset)
  return _internal_offset();
}
inline void Insruction::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  offset_ = value;
}
inline void Insruction::set_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:Insruction.offset)
}

// repeated .MemoryReference refs = 4;
inline int Insruction::_internal_refs_size() const {
  return refs_.size();
}
inline int Insruction::refs_size() const {
  return _internal_refs_size();
}
inline void Insruction::clear_refs() {
  refs_.Clear();
}
inline ::MemoryReference* Insruction::mutable_refs(int index) {
  // @@protoc_insertion_point(field_mutable:Insruction.refs)
  return refs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryReference >*
Insruction::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:Insruction.refs)
  return &refs_;
}
inline const ::MemoryReference& Insruction::_internal_refs(int index) const {
  return refs_.Get(index);
}
inline const ::MemoryReference& Insruction::refs(int index) const {
  // @@protoc_insertion_point(field_get:Insruction.refs)
  return _internal_refs(index);
}
inline ::MemoryReference* Insruction::_internal_add_refs() {
  return refs_.Add();
}
inline ::MemoryReference* Insruction::add_refs() {
  // @@protoc_insertion_point(field_add:Insruction.refs)
  return _internal_add_refs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MemoryReference >&
Insruction::refs() const {
  // @@protoc_insertion_point(field_list:Insruction.refs)
  return refs_;
}

// -------------------------------------------------------------------

// Register

// string name = 1;
inline void Register::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Register::name() const {
  // @@protoc_insertion_point(field_get:Register.name)
  return _internal_name();
}
inline void Register::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Register.name)
}
inline std::string* Register::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Register.name)
  return _internal_mutable_name();
}
inline const std::string& Register::_internal_name() const {
  return name_.Get();
}
inline void Register::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Register::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Register.name)
}
inline void Register::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Register.name)
}
inline void Register::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Register.name)
}
inline std::string* Register::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Register::release_name() {
  // @@protoc_insertion_point(field_release:Register.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Register::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Register.name)
}

// uint64 value = 2;
inline void Register::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Register::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Register::value() const {
  // @@protoc_insertion_point(field_get:Register.value)
  return _internal_value();
}
inline void Register::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void Register::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Register.value)
}

// -------------------------------------------------------------------

// Record

// .Insruction Insruction = 1;
inline bool Record::_internal_has_insruction() const {
  return this != internal_default_instance() && insruction_ != nullptr;
}
inline bool Record::has_insruction() const {
  return _internal_has_insruction();
}
inline void Record::clear_insruction() {
  if (GetArena() == nullptr && insruction_ != nullptr) {
    delete insruction_;
  }
  insruction_ = nullptr;
}
inline const ::Insruction& Record::_internal_insruction() const {
  const ::Insruction* p = insruction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Insruction&>(
      ::_Insruction_default_instance_);
}
inline const ::Insruction& Record::insruction() const {
  // @@protoc_insertion_point(field_get:Record.Insruction)
  return _internal_insruction();
}
inline void Record::unsafe_arena_set_allocated_insruction(
    ::Insruction* insruction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insruction_);
  }
  insruction_ = insruction;
  if (insruction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Record.Insruction)
}
inline ::Insruction* Record::release_insruction() {
  
  ::Insruction* temp = insruction_;
  insruction_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Insruction* Record::unsafe_arena_release_insruction() {
  // @@protoc_insertion_point(field_release:Record.Insruction)
  
  ::Insruction* temp = insruction_;
  insruction_ = nullptr;
  return temp;
}
inline ::Insruction* Record::_internal_mutable_insruction() {
  
  if (insruction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Insruction>(GetArena());
    insruction_ = p;
  }
  return insruction_;
}
inline ::Insruction* Record::mutable_insruction() {
  // @@protoc_insertion_point(field_mutable:Record.Insruction)
  return _internal_mutable_insruction();
}
inline void Record::set_allocated_insruction(::Insruction* insruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete insruction_;
  }
  if (insruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insruction);
    if (message_arena != submessage_arena) {
      insruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insruction, submessage_arena);
    }
    
  } else {
    
  }
  insruction_ = insruction;
  // @@protoc_insertion_point(field_set_allocated:Record.Insruction)
}

// repeated .Register registers = 2;
inline int Record::_internal_registers_size() const {
  return registers_.size();
}
inline int Record::registers_size() const {
  return _internal_registers_size();
}
inline void Record::clear_registers() {
  registers_.Clear();
}
inline ::Register* Record::mutable_registers(int index) {
  // @@protoc_insertion_point(field_mutable:Record.registers)
  return registers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Register >*
Record::mutable_registers() {
  // @@protoc_insertion_point(field_mutable_list:Record.registers)
  return &registers_;
}
inline const ::Register& Record::_internal_registers(int index) const {
  return registers_.Get(index);
}
inline const ::Register& Record::registers(int index) const {
  // @@protoc_insertion_point(field_get:Record.registers)
  return _internal_registers(index);
}
inline ::Register* Record::_internal_add_registers() {
  return registers_.Add();
}
inline ::Register* Record::add_registers() {
  // @@protoc_insertion_point(field_add:Record.registers)
  return _internal_add_registers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Register >&
Record::registers() const {
  // @@protoc_insertion_point(field_list:Record.registers)
  return registers_;
}

// -------------------------------------------------------------------

// BasicBlockHeader

// uint64 thread_id = 1;
inline void BasicBlockHeader::clear_thread_id() {
  thread_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicBlockHeader::_internal_thread_id() const {
  return thread_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicBlockHeader::thread_id() const {
  // @@protoc_insertion_point(field_get:BasicBlockHeader.thread_id)
  return _internal_thread_id();
}
inline void BasicBlockHeader::_internal_set_thread_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  thread_id_ = value;
}
inline void BasicBlockHeader::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_thread_id(value);
  // @@protoc_insertion_point(field_set:BasicBlockHeader.thread_id)
}

// uint64 module_id = 2;
inline void BasicBlockHeader::clear_module_id() {
  module_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicBlockHeader::_internal_module_id() const {
  return module_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicBlockHeader::module_id() const {
  // @@protoc_insertion_point(field_get:BasicBlockHeader.module_id)
  return _internal_module_id();
}
inline void BasicBlockHeader::_internal_set_module_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  module_id_ = value;
}
inline void BasicBlockHeader::set_module_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_module_id(value);
  // @@protoc_insertion_point(field_set:BasicBlockHeader.module_id)
}

// uint64 begin_address = 3;
inline void BasicBlockHeader::clear_begin_address() {
  begin_address_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicBlockHeader::_internal_begin_address() const {
  return begin_address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicBlockHeader::begin_address() const {
  // @@protoc_insertion_point(field_get:BasicBlockHeader.begin_address)
  return _internal_begin_address();
}
inline void BasicBlockHeader::_internal_set_begin_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  begin_address_ = value;
}
inline void BasicBlockHeader::set_begin_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_begin_address(value);
  // @@protoc_insertion_point(field_set:BasicBlockHeader.begin_address)
}

// -------------------------------------------------------------------

// BasicBlock

// .BasicBlockHeader bbhdr = 1;
inline bool BasicBlock::_internal_has_bbhdr() const {
  return this != internal_default_instance() && bbhdr_ != nullptr;
}
inline bool BasicBlock::has_bbhdr() const {
  return _internal_has_bbhdr();
}
inline void BasicBlock::clear_bbhdr() {
  if (GetArena() == nullptr && bbhdr_ != nullptr) {
    delete bbhdr_;
  }
  bbhdr_ = nullptr;
}
inline const ::BasicBlockHeader& BasicBlock::_internal_bbhdr() const {
  const ::BasicBlockHeader* p = bbhdr_;
  return p != nullptr ? *p : reinterpret_cast<const ::BasicBlockHeader&>(
      ::_BasicBlockHeader_default_instance_);
}
inline const ::BasicBlockHeader& BasicBlock::bbhdr() const {
  // @@protoc_insertion_point(field_get:BasicBlock.bbhdr)
  return _internal_bbhdr();
}
inline void BasicBlock::unsafe_arena_set_allocated_bbhdr(
    ::BasicBlockHeader* bbhdr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbhdr_);
  }
  bbhdr_ = bbhdr;
  if (bbhdr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BasicBlock.bbhdr)
}
inline ::BasicBlockHeader* BasicBlock::release_bbhdr() {
  
  ::BasicBlockHeader* temp = bbhdr_;
  bbhdr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::BasicBlockHeader* BasicBlock::unsafe_arena_release_bbhdr() {
  // @@protoc_insertion_point(field_release:BasicBlock.bbhdr)
  
  ::BasicBlockHeader* temp = bbhdr_;
  bbhdr_ = nullptr;
  return temp;
}
inline ::BasicBlockHeader* BasicBlock::_internal_mutable_bbhdr() {
  
  if (bbhdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::BasicBlockHeader>(GetArena());
    bbhdr_ = p;
  }
  return bbhdr_;
}
inline ::BasicBlockHeader* BasicBlock::mutable_bbhdr() {
  // @@protoc_insertion_point(field_mutable:BasicBlock.bbhdr)
  return _internal_mutable_bbhdr();
}
inline void BasicBlock::set_allocated_bbhdr(::BasicBlockHeader* bbhdr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bbhdr_;
  }
  if (bbhdr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bbhdr);
    if (message_arena != submessage_arena) {
      bbhdr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbhdr, submessage_arena);
    }
    
  } else {
    
  }
  bbhdr_ = bbhdr;
  // @@protoc_insertion_point(field_set_allocated:BasicBlock.bbhdr)
}

// repeated .Record records = 2;
inline int BasicBlock::_internal_records_size() const {
  return records_.size();
}
inline int BasicBlock::records_size() const {
  return _internal_records_size();
}
inline void BasicBlock::clear_records() {
  records_.Clear();
}
inline ::Record* BasicBlock::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:BasicBlock.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Record >*
BasicBlock::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:BasicBlock.records)
  return &records_;
}
inline const ::Record& BasicBlock::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::Record& BasicBlock::records(int index) const {
  // @@protoc_insertion_point(field_get:BasicBlock.records)
  return _internal_records(index);
}
inline ::Record* BasicBlock::_internal_add_records() {
  return records_.Add();
}
inline ::Record* BasicBlock::add_records() {
  // @@protoc_insertion_point(field_add:BasicBlock.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Record >&
BasicBlock::records() const {
  // @@protoc_insertion_point(field_list:BasicBlock.records)
  return records_;
}

// -------------------------------------------------------------------

// Trace

// .TraceHeader header = 1;
inline bool Trace::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Trace::has_header() const {
  return _internal_has_header();
}
inline void Trace::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::TraceHeader& Trace::_internal_header() const {
  const ::TraceHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::TraceHeader&>(
      ::_TraceHeader_default_instance_);
}
inline const ::TraceHeader& Trace::header() const {
  // @@protoc_insertion_point(field_get:Trace.header)
  return _internal_header();
}
inline void Trace::unsafe_arena_set_allocated_header(
    ::TraceHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Trace.header)
}
inline ::TraceHeader* Trace::release_header() {
  
  ::TraceHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::TraceHeader* Trace::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Trace.header)
  
  ::TraceHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::TraceHeader* Trace::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::TraceHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::TraceHeader* Trace::mutable_header() {
  // @@protoc_insertion_point(field_mutable:Trace.header)
  return _internal_mutable_header();
}
inline void Trace::set_allocated_header(::TraceHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Trace.header)
}

// repeated .BasicBlock data = 2;
inline int Trace::_internal_data_size() const {
  return data_.size();
}
inline int Trace::data_size() const {
  return _internal_data_size();
}
inline void Trace::clear_data() {
  data_.Clear();
}
inline ::BasicBlock* Trace::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:Trace.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicBlock >*
Trace::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:Trace.data)
  return &data_;
}
inline const ::BasicBlock& Trace::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::BasicBlock& Trace::data(int index) const {
  // @@protoc_insertion_point(field_get:Trace.data)
  return _internal_data(index);
}
inline ::BasicBlock* Trace::_internal_add_data() {
  return data_.Add();
}
inline ::BasicBlock* Trace::add_data() {
  // @@protoc_insertion_point(field_add:Trace.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BasicBlock >&
Trace::data() const {
  // @@protoc_insertion_point(field_list:Trace.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_format_2eproto
